function External-AD-Join {
    $cfg = Get-JujuCharmConfig
    $ad_ip = $cfg['external-ad-ip']
    $domain = $cfg['external-ad-domain']
    $username = "{0}\{1}" -f @($domain, $cfg['external-ad-admin-user'])
    $password = $cfg['external-ad-admin-pass'] | ConvertTo-SecureString -asPlainText -Force
    $domain_ou = $cfg['external-ad-ou']
    $domain_group = $cfg['external-ad-group']
    $service_account = $cfg['external-ad-service-account']
    $credential = New-Object System.Management.Automation.PSCredential("$username", $password)

    Write-JujuWarning "External AD -> Joining External AD domain: $domain"
    Install-WindowsFeatures -Features @('RSAT-AD-PowerShell')
    if (!(Confirm-IsInDomain $domain)) {
        Set-DnsClientServerAddress -InterfaceAlias * -ServerAddresses $ad_ip
        if($domain_ou) {
            Write-JujuWarning "External AD -> Joining AD OU: $domain_ou"
            $join_ad_result = Add-Computer -DomainName $domain -Credential $credential -OUPath $domain_ou -PassThru
        } else {
            Write-JujuWarning "External AD -> AD OU not provided"
	    $join_ad_result = Add-Computer -DomainName $domain -Credential $credential -PassThru
        }
        if ($join_ad_result.HasSucceeded){
            Write-JujuWarning "External AD -> Joined AD domain, rebooting"
            $computer = Get-ADComputer -Credential $credential (Get-ItemProperty `
                                       -Path "HKLM:\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName").ComputerName
            Add-ADGroupMember -Credential $credential -Identity $domain_group -Members $computer
            Invoke-JujuReboot -Now
        }
    }

    Add-LocalGroupMember -Group Administrators -Member $username -ErrorAction SilentlyContinue
    Add-LocalGroupMember -Group Administrators -Member "$domain\$service_account$" -ErrorAction SilentlyContinue
    Grant-Privilege -User $username -Grant SeServiceLogonRight
    Grant-Privilege -User "$domain\$service_account$" -Grant SeServiceLogonRight

    Enable-WSManCredSSP -Role Server -Force | Out-Null
    Enable-WSManCredSSP -Role Client -DelegateComputer '*' -Force | Out-Null

    $credssp_script = Join-Path (Get-JujuCharmDir) "files\enable-credssp.ps1"
    Start-ProcessAsUser -Command "$PShome\powershell.exe" `
        -Arguments @("-NonInteractive","-executionpolicy", "Unrestricted", `
        "-File", $credssp_script, "-Username", $username, "-Password", $cfg['external-ad-admin-pass'], `
        "-DomainName", $domain) -Credential $credential

    $computer = Get-ADComputer -Credential $credential (Get-ItemProperty `
                               -Path "HKLM:\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName").ComputerName

    Write-JujuWarning "External AD -> adding service account"
    Add-ADComputerServiceAccount -Credential $credential -Identity $computer -ServiceAccount $service_account
    Set-ADServiceAccount -Credential $credential -Identity $service_account -PrincipalsAllowedToRetrieveManagedPassword $domain_group
    Invoke-Command -ComputerName $computer.name -Credential $credential -Authentication Credssp `
           { Install-ADServiceAccount -Identity $using:service_account -verbose }
    Set-ADAccountControl -Credential $credential -Identity $computer -TrustedToAuthForDelegation $true

    Enable-LiveMigration
    Set-VMHost -VirtualMachineMigrationAuthenticationType Kerberos
    foreach ($s in @("nova-compute", "neutron-hyperv-agent", "neutron-ovs-agent")) { 
        $service = gwmi win32_service -filter "name='$s'"
        if (($service) -and ($service.startname.tolower() -ne "$domain\$service_account$".tolower())) {
            if ($service.state -eq "Running"){
                $service.stopservice()
                $service.change($null,$null,$null,$null,$null,$null,"$domain\$service_account$",$null)
	        $service.startservice()
            } else {
                $service.change($null,$null,$null,$null,$null,$null,"$domain\$service_account$",$null)
            }
        }
    }
    $compute_nodes = Get-ADGroupMember -Identity $domain_group -Credential $credential
    if($compute_nodes -is [system.array]){
        foreach ($compute in $compute_nodes) {
            if ( $compute.name -ne $computer.name) {
                Set-ADObject -Credential $credential -Identity $computer `
                             -Add @{'msDS-AllowedToDelegateTo' = ('{0}/{1}' -f 'Microsoft Virtual System Migration Service', $compute.name) }
                Set-ADObject -Credential $credential -Identity $computer `
                             -Add @{'msDS-AllowedToDelegateTo' = ('{0}/{1}' -f 'cifs', $compute.name) }
            }
        }
    }
}

function External-AD-Leave {
    $cfg = Get-JujuCharmConfig
    $domain = $cfg['external-ad-domain']
    $username = "{0}\{1}" -f @($domain, $cfg['external-ad-admin-user'])
    $password = $cfg['external-ad-admin-pass'] | ConvertTo-SecureString -asPlainText -Force
    $credential = New-Object System.Management.Automation.PSCredential("$username", $password)

    Write-JujuWarning "External AD -> Leaving External AD domain: $domain"
    if (Confirm-IsInDomain $domain) {
        $computer = Get-ADComputer -Credential $credential (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName").ComputerName
        Remove-ADComputer -Identity $computer -Credential $credential -Confirm:$false -ErrorAction SilentlyContinue
    }
}